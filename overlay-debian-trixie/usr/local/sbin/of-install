#!/usr/bin/env bash

## of-install v1.22 (17th October 2023)
##  Simple installers for software on OpenFrames.

usage() {
	echo "Usage: $0 <option> [options]"
	echo
	echo "  build        :  Installs kernel headers and essential build components."
	echo "  mplayer      :  Installs mplayer with OpenFrame settings."
	echo "  squeezeplay  :  Installs SqueezePlay and the X.Org Server."
	echo "  xserver      :  Installs the X.Org Server."
	echo
	exit 1
}

if [ "$#" -lt 1 ] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	usage
fi

if [ "$USER" != "root" ] && [ "$USER" != "" ]; then
	echo "You need to run this with superuser privileges. Try 'sudo $0'."
	exit 1
fi

THISSCRIPTPATH="$(cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P)"


### Setup

KERNMAJVER=$(uname -r | awk -F. '{print $1}')
KERNMIDVER=$(uname -r | awk -F. '{print $2}')
KERNMINVER=$(uname -r | awk -F. '{print $3}')


### Installers


build() {

	### Configuration #####
	KERNELSERVER="https://openbeak.net/openframe/kernel"
	#######################

	KERNELFETCHURL=""$KERNELSERVER"/"$KERNMAJVER"."$KERNMIDVER"/$(uname -r)/"
	echo $KERNELFETCHURL

	echo -n "Downloading $(uname -r) kernel packages..."
	mkdir -p /tmp/$(uname -r)
	if wget -q -r -l1 -nd -N -np -A.deb -erobots=off -P /tmp/$(uname -r) $KERNELFETCHURL; then

		echo " done."
		echo "Installing headers..."
		dpkg -i /tmp/$(uname -r)/linux-headers*.deb
		echo "Installing build-essential..."
		apt-get update
		apt-get -y install autoconf build-essential git

	else

		echo "Download failed."
		exit 1

	fi

	sync
	echo "Installation of build environment completed."

}


mplayer () {

	echo "Installing mplayer..."
	echo
	apt-get -y install mplayer
	echo -e "\n###OpenFrame Specific\nvo=x11\nva=x11\nao=alsa\nzoom=yes\nfs=yes" >> /etc/mplayer/mplayer.conf
	echo -e "\n###OpenFrame Specific\nMOUSE_BTN0_DBL quit\nMOUSE_BTN0-MOUSE_BTN0_DBL quit" >> /etc/mplayer/input.conf

	sync
	echo "Installation of mplayer completed."

}


squeezeplay() {

	### Configuration #####
	SQPSERVER="https://openbeak.net/openframe/squeezeplay/v7.8"
	#######################

	LATESTSQP=$(curl -s $SQPSERVER/ | grep '<a' | grep '.tgz' | grep -v '.tgz.md5' | awk -F'.tgz\">' {'print $2'} | awk -F'</' {'print $1'} | tail -1)

	[ -d /opt/squeezeplay ] && rm -rf /opt/squeezeplay

	wget -P /tmp $SQPSERVER/$LATESTSQP
	wget -P /tmp $SQPSERVER/$LATESTSQP.md5

	TGZHASH=$(cat /tmp/$LATESTSQP.md5 | awk -F' ' {'print $1'})
	OURHASH=$(md5sum /tmp/$LATESTSQP | awk -F' ' {'print $1'})

	echo $TGZHASH
	echo $OURHASH
	echo

	if [[ "$TGZHASH" == "" ]] || [[ "$OURHASH" == "" ]]; then

		echo "No checksums! Looks like the download failed."
		exit 1

	fi

	if [[ ! "$OURHASH" == "$TGZHASH" ]]; then

		echo "Checksum mismatch. Bailing!"
		rm /tmp/squeezeplay-*.tgz*
		exit 1

	else

		echo "Checksums match, continuing..."

		# Create a standard user 'squeezeplay' with no configured password.
		id -u squeezeplay &>/dev/null || useradd -s /bin/sh --create-home squeezeplay
		adduser squeezeplay audio &>/dev/null
		adduser squeezeplay users &>/dev/null
		adduser squeezeplay video &>/dev/null

		# Allow squeezeplay user to do power off and reboot and stuff.
		SQPPOLKIT="polkit.addRule(function(action, subject) {
    if (subject.user == "squeezeplay") {
        // permit reboot/etc actions for squeezeplay user (jive UI)
        if (action.id == "org.freedesktop.login1.power-off" ||
            action.id == "org.freedesktop.login1.reboot" ||
            action.id == "org.freedesktop.login1.set-wall-message" ||
            action.id == "org.freedesktop.login1.power-off-multiple-sessions" ||
            action.id == "org.freedesktop.login1.reboot-multiple-sessions") {
            return polkit.Result.YES;
        }
    }
});"
		echo "$SQPPOLKIT" > /etc/polkit-1/rules.d/60-squeezeplay.rules
		chown root: /etc/polkit-1/rules.d/60-squeezeplay.rules

		# Install SqueezePlay with 'squeezeplay' user permissions.
		mkdir /opt/squeezeplay
		chown squeezeplay:audio /opt/squeezeplay
		sudo -u squeezeplay tar -C /opt/squeezeplay -zxf /tmp/$LATESTSQP

		# Configure the system to run SqueezePlay without requiring login.
		of-settings autostartx squeezeplay
		of-settings autoxrun squeezeplay "/opt/squeezeplay/bin/squeezeplay.sh"

		# Configure splash screens.
		if [ -d /usr/share/plymouth/themes ]; then
			mkdir /usr/share/plymouth/themes/squeezeplay
			cp /opt/squeezeplay/share/plymouth/* /usr/share/plymouth/themes/squeezeplay
			of-settings splash squeezeplay
			of-settings grubquiet enable
		fi

		# Tidy up.
		rm /tmp/squeezeplay-*.tgz*

		sync
		echo "Installation of SqueezePlay completed."

	fi

}


xserver() {

	apt-get -y install xserver-xorg xserver-xorg-legacy x11-utils xinit xterm
	of-settings xdefaults
	
	sync
	echo "Installation of Xserver completed."

}


### Triggers

echo "Installing ${1}..."
echo

if [[ "${1}" == "build" ]]; then

	apt update
	build

elif [[ "${1}" == "mplayer" ]]; then

	[ ! -x /usr/bin/startx ] && apt update && xserver
	mplayer

elif [[ "${1}" == "squeezeplay" ]]; then

	[ ! -x /usr/bin/startx ] && apt update && xserver
	squeezeplay

elif [[ "${1}" == "xserver" ]]; then

	apt update
	xserver

else

	echo "No installation script for '${1}'."
	exit 1

fi

exit 0
